if(variable_names_vec == "all"){
df %>%
purrr::map(function(x) sum(is.na(x))) %>%
unlist() %>%
broom::tidy() %>%
dplyr::rename("variable_name" = "names", "num_missing_values" = "x")
} else if (sum(variable_names_vec %in% colnames(df)) ==
length(variable_names_vec)) {
df[, variable_names_vec] %>%
purrr::map(function(x) sum(is.na(x))) %>%
unlist() %>%
broom::tidy() %>%
dplyr::rename("variable_name" = "names", "num_missing_values" = "x")
} else {
stop("All the variable (columns) names present in the vector 'varibale_names_vec' should
exist in the underlying dataset entered into 'data'. Please make sure that
this is the case, before proceeding.")
}
} else {
stop("Either the object doesn't exist or it isn't a dataframe/tibble. Please make
sure that the object exists in the current environment and also make
sure that it is of class: 'data.frame'/'tbl'/'tbl_df'")
}
}
cars <- mtcars
count_missing_val(mtcars)
source("C:/Users/Hp/OneDrive/Desktop/econR/R/helper.R")
count_missing_val(mtcars)
count_missing_val(cars)
cars
cars
count_missing_val(cars)
class(cars)
is_tibble(data.frame())
is_tibble(cars)
count_missing_val <- function(df, variable_names_vec = "all"){
if(envnames::get_obj_name(df) %in% ls() && (is_tibble(df))){
if(variable_names_vec == "all"){
df %>%
purrr::map(function(x) sum(is.na(x))) %>%
unlist() %>%
broom::tidy() %>%
dplyr::rename("variable_name" = "names", "num_missing_values" = "x")
} else if (sum(variable_names_vec %in% colnames(df)) ==
length(variable_names_vec)) {
df[, variable_names_vec] %>%
purrr::map(function(x) sum(is.na(x))) %>%
unlist() %>%
broom::tidy() %>%
dplyr::rename("variable_name" = "names", "num_missing_values" = "x")
} else {
stop("All the variable (columns) names present in the vector 'varibale_names_vec' should
exist in the underlying dataset entered into 'data'. Please make sure that
this is the case, before proceeding.")
}
} else {
stop("Either the object doesn't exist or it isn't a dataframe/tibble. Please make
sure that the object exists in the current environment and also make
sure that it is of class: 'data.frame'/'tbl'/'tbl_df'")
}
}
count_missing_val <- function(df, variable_names_vec = "all"){
if(envnames::get_obj_name(df) %in% ls() && (is_tibble(df))){
if(variable_names_vec == "all"){
df %>%
purrr::map(function(x) sum(is.na(x))) %>%
unlist() %>%
broom::tidy() %>%
dplyr::rename("variable_name" = "names", "num_missing_values" = "x")
} else if (sum(variable_names_vec %in% colnames(df)) ==
length(variable_names_vec)) {
df[, variable_names_vec] %>%
purrr::map(function(x) sum(is.na(x))) %>%
unlist() %>%
broom::tidy() %>%
dplyr::rename("variable_name" = "names", "num_missing_values" = "x")
} else {
stop("All the variable (columns) names present in the vector 'varibale_names_vec' should
exist in the underlying dataset entered into 'data'. Please make sure that
this is the case, before proceeding.")
}
} else {
stop("Either the object doesn't exist or it isn't a tibble. Please make
sure that the object exists in the current environment and also make
sure that it is of class: 'tbl'/'tbl_df'. To coerce an object to
a class tibble you can use: 'as_tibble' function.")
}
}
count_missing_val(cars)
envnames::get_obj_name(cars) %in% ls() && (is_tibble(cars))
envnames::get_obj_name(cars) %in% ls()
(is_tibble(cars))
?skimr::is_data_frame()
count_missing_val <- function(df, variable_names_vec = "all"){
if((envnames::get_obj_name(df) %in% ls()) &&
(is_tibble(df) || is.data.frame(df))){
if(variable_names_vec == "all"){
df %>%
purrr::map(function(x) sum(is.na(x))) %>%
unlist() %>%
broom::tidy() %>%
dplyr::rename("variable_name" = "names", "num_missing_values" = "x")
} else if (sum(variable_names_vec %in% colnames(df)) ==
length(variable_names_vec)) {
df[, variable_names_vec] %>%
purrr::map(function(x) sum(is.na(x))) %>%
unlist() %>%
broom::tidy() %>%
dplyr::rename("variable_name" = "names", "num_missing_values" = "x")
} else {
stop("All the variable (columns) names present in the vector 'varibale_names_vec' should
exist in the underlying dataset entered into 'data'. Please make sure that
this is the case, before proceeding.")
}
} else {
stop("Either the object doesn't exist or it isn't a tibble/dataframe. Please make
sure that the object exists in the current environment and also make
sure that it is of class: 'data.frame'/'tbl'/'tbl_df'. To coerce an object to
to tibble you can use: 'as_tibble' function.")
}
}
count_missing_val(cars)
autoplot(count_missing_val())
?autoplot
foo <- count_missing_val(cars)
autoplot(foo)
ggplot2::autoplot(foo)
class(cars)
count_missing_val <- function(df, variable_names_vec = "all"){
if((envnames::get_obj_name(df) %in% ls()) &&
(tibble::is_tibble(df) || is.data.frame(df))){
df <- dplyr::as_tibble(df)
if(variable_names_vec == "all"){
df %>%
purrr::map(function(x) sum(is.na(x))) %>%
unlist() %>%
broom::tidy() %>%
dplyr::rename("variable_name" = "names", "num_missing_values" = "x")
} else if (sum(variable_names_vec %in% colnames(df)) ==
length(variable_names_vec)) {
df[, variable_names_vec] %>%
purrr::map(function(x) sum(is.na(x))) %>%
unlist() %>%
broom::tidy() %>%
dplyr::rename("variable_name" = "names", "num_missing_values" = "x")
} else {
stop("All the variable (columns) names present in the vector 'varibale_names_vec' should
exist in the underlying dataset entered into 'data'. Please make sure that
this is the case, before proceeding.")
}
} else {
stop("Either the object doesn't exist or it isn't a tibble/dataframe. Please make
sure that the object exists in the current environment and also make
sure that it is of class: 'data.frame'/'tbl'/'tbl_df'. To coerce an object to
to tibble you can use: 'as_tibble' function.")
}
}
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
knitr::opts_chunk$set(cache = TRUE, cache.lazy = FALSE, warning = FALSE,
message =FALSE, echo = TRUE, dpi = 180,
fig.width = 8, fig.height = 5)
theme_minimal()
dummy_data <- read.dta(create_abs_path("data-raw/dummy_main.dta"))
count_missing_val(dummy_data)
ggplot2::autoplot(count_missing_val(dummy_data))
help("Deprecated")
?quickplot
count_missing_values <- function(df, variable_names_vec = "all"){
# "df" object should exist and should be a tibble/dataframe
if((envnames::get_obj_name(df) %in% ls()) &&
(tibble::is_tibble(df) || is.data.frame(df))){
df <- dplyr::as_tibble(df)
# view missing values for all variables (columns) in the df
if(variable_names_vec == "all"){
return(df %>%
purrr::map(function(x) sum(is.na(x))) %>%
unlist() %>%
broom::tidy() %>%
dplyr::rename("variable_name" = "names", "num_missing_values" = "x"))
# view missing values only for selected variables in the "variable_names_vec"
# argument
} else if (sum(variable_names_vec %in% colnames(df)) ==
length(variable_names_vec)) {
return(df[, variable_names_vec] %>%
purrr::map(function(x) sum(is.na(x))) %>%
unlist() %>%
broom::tidy() %>%
dplyr::rename("variable_name" = "names", "num_missing_values" = "x"))
# check if atleast one of the variable (column) names entered in the "variable_names_vec"
# argument does not exist in the underlying dataset entered in "df".
} else {
stop("All the variable (columns) names present in the vector 'varibale_names_vec' should
exist in the underlying dataset entered into 'data'. Please make sure that
this is the case, before proceeding.")
}
} else {
stop("Either the object doesn't exist or it isn't a tibble/dataframe. Please make
sure that the object exists in the current environment and also make
sure that it is of class: 'data.frame'/'tbl'/'tbl_df'. To coerce an object to
to tibble you can use: 'as_tibble' function.")
}
}
count_missing_val(dummy_data)
dummy_data_missing <- count_missing_values(dummy_data)
dummy_data_missing
ggplot2::ggplot(mapping = aes(x = variable_name, y = num_missing_values)) +
geom_col()
ggplot2::ggplot(data = dummy_data_missing, mapping = aes(x = variable_name, y = num_missing_values)) +
geom_col()
ggplot2::ggplot(data = dummy_data_missing, mapping = aes(x = variable_name, y = num_missing_values)) +
geom_col() + coord_flip(
)
ggplot2::ggplot(data = dummy_data_missing, mapping = aes(x = variable_name, y = num_missing_values, size = num_missing_values)) +
geom_point() + coord_flip()
count_missing_values <- function(df, variable_names_vec = "all"){
# "df" object should exist and should be a tibble/dataframe
if((envnames::get_obj_name(df) %in% ls()) &&
(tibble::is_tibble(df) || is.data.frame(df))){
df <- dplyr::as_tibble(df)
# view missing values for all variables (columns) in the df
if(variable_names_vec == "all"){
return(df %>%
purrr::map(function(x) sum(is.na(x))) %>%
unlist() %>%
broom::tidy() %>%
dplyr::rename("variable_name" = "names", "num_missing_values" = "x")) %>%
dplyr::mutate(total_values = nrow(df),
percent_missing_val = num_missing_values/total_values)
# view missing values only for selected variables in the "variable_names_vec"
# argument
} else if (sum(variable_names_vec %in% colnames(df)) ==
length(variable_names_vec)) {
return(df[, variable_names_vec] %>%
purrr::map(function(x) sum(is.na(x))) %>%
unlist() %>%
broom::tidy() %>%
dplyr::rename("variable_name" = "names", "num_missing_values" = "x")) %>%
dplyr::mutate(total_values = nrow(df),
percent_missing_val = num_missing_values/total_values)
# check if atleast one of the variable (column) names entered in the "variable_names_vec"
# argument does not exist in the underlying dataset entered in "df".
} else {
stop("All the variable (columns) names present in the vector 'varibale_names_vec' should
exist in the underlying dataset entered into 'data'. Please make sure that
this is the case, before proceeding.")
}
} else {
stop("Either the object doesn't exist or it isn't a tibble/dataframe. Please make
sure that the object exists in the current environment and also make
sure that it is of class: 'data.frame'/'tbl'/'tbl_df'. To coerce an object to
to tibble you can use: 'as_tibble' function.")
}
}
count_missing_values(dummy_data)
count_missing_values <- function(df, variable_names_vec = "all"){
# "df" object should exist and should be a tibble/dataframe
if((envnames::get_obj_name(df) %in% ls()) &&
(tibble::is_tibble(df) || is.data.frame(df))){
df <- dplyr::as_tibble(df)
# view missing values for all variables (columns) in the df
if(variable_names_vec == "all"){
return(df %>%
purrr::map(function(x) sum(is.na(x))) %>%
unlist() %>%
broom::tidy() %>%
dplyr::rename("variable_name" = "names", "num_missing_values" = "x")) %>%
dplyr::mutate(total_values = nrow(df),
percent_missing_val = num_missing_values/total_values)
# view missing values only for selected variables in the "variable_names_vec"
# argument
} else if (sum(variable_names_vec %in% colnames(df)) ==
length(variable_names_vec)) {
return(df[, variable_names_vec] %>%
purrr::map(function(x) sum(is.na(x))) %>%
unlist() %>%
broom::tidy() %>%
dplyr::rename("variable_name" = "names", "num_missing_values" = "x")) %>%
dplyr::mutate(total_values = nrow(df),
percent_missing_val = num_missing_values/total_values)
# check if atleast one of the variable (column) names entered in the "variable_names_vec"
# argument does not exist in the underlying dataset entered in "df".
} else {
stop("All the variable (columns) names present in the vector 'varibale_names_vec' should
exist in the underlying dataset entered into 'data'. Please make sure that
this is the case, before proceeding.")
}
} else {
stop("Either the object doesn't exist or it isn't a tibble/dataframe. Please make
sure that the object exists in the current environment and also make
sure that it is of class: 'data.frame'/'tbl'/'tbl_df'. To coerce an object to
to tibble you can use: 'as_tibble' function.")
}
}
count_missing_values(dummy_data)
count_missing_values <- function(df, variable_names_vec = "all"){
# "df" object should exist and should be a tibble/dataframe
if((envnames::get_obj_name(df) %in% ls()) &&
(tibble::is_tibble(df) || is.data.frame(df))){
df <- dplyr::as_tibble(df)
# view missing values for all variables (columns) in the df
if(variable_names_vec == "all"){
return(df %>%
purrr::map(function(x) sum(is.na(x))) %>%
unlist() %>%
broom::tidy() %>%
dplyr::rename("variable_name" = "names", "num_missing_values" = "x") %>%
dplyr::mutate(total_values = nrow(df),
percent_missing_val = num_missing_values/total_values))
# view missing values only for selected variables in the "variable_names_vec"
# argument
} else if (sum(variable_names_vec %in% colnames(df)) ==
length(variable_names_vec)) {
return(df[, variable_names_vec] %>%
purrr::map(function(x) sum(is.na(x))) %>%
unlist() %>%
broom::tidy() %>%
dplyr::rename("variable_name" = "names", "num_missing_values" = "x") %>%
dplyr::mutate(total_values = nrow(df),
percent_missing_val = num_missing_values/total_values))
# check if atleast one of the variable (column) names entered in the "variable_names_vec"
# argument does not exist in the underlying dataset entered in "df".
} else {
stop("All the variable (columns) names present in the vector 'varibale_names_vec' should
exist in the underlying dataset entered into 'data'. Please make sure that
this is the case, before proceeding.")
}
} else {
stop("Either the object doesn't exist or it isn't a tibble/dataframe. Please make
sure that the object exists in the current environment and also make
sure that it is of class: 'data.frame'/'tbl'/'tbl_df'. To coerce an object to
to tibble you can use: 'as_tibble' function.")
}
}
count_missing_values(dummy_data)
stop("Either the object doesn't exist or it isn't a tibble/dataframe. Please make
sure that the object exists in the current environment and also make
sure that it is of class: 'data.frame'/'tbl'/'tbl_df'. To coerce an object to
to tibble you can use: 'as_tibble' function.")
count_missing_values <- function(df, variable_names_vec = "all"){
# "df" object should exist and should be a tibble/dataframe
if((envnames::get_obj_name(df) %in% ls()) &&
(tibble::is_tibble(df) || is.data.frame(df))){
df <- dplyr::as_tibble(df)
# view missing values for all variables (columns) in the df
if(variable_names_vec == "all"){
return(df %>%
purrr::map(function(x) sum(is.na(x))) %>%
unlist() %>%
broom::tidy() %>%
dplyr::rename("variable_name" = "names", "num_missing_values" = "x") %>%
dplyr::mutate(total_values = nrow(df),
percent_missing_val = num_missing_values/total_values))
# view missing values only for selected variables in the "variable_names_vec"
# argument
} else if (sum(variable_names_vec %in% colnames(df)) ==
length(variable_names_vec)) {
return(df[, variable_names_vec] %>%
purrr::map(function(x) sum(is.na(x))) %>%
unlist() %>%
broom::tidy() %>%
dplyr::rename("variable_name" = "names", "num_missing_values" = "x") %>%
dplyr::mutate(total_values = nrow(df),
percent_missing_values = (num_missing_values/total_values) * 100))
# check if atleast one of the variable (column) names entered in the "variable_names_vec"
# argument does not exist in the underlying dataset entered in "df".
} else {
stop("All the variable (columns) names present in the vector 'varibale_names_vec' should
exist in the underlying dataset entered into 'data'. Please make sure that
this is the case, before proceeding.")
}
} else {
stop("Either the object doesn't exist or it isn't a tibble/dataframe. Please make
sure that the object exists in the current environment and also make
sure that it is of class: 'data.frame'/'tbl'/'tbl_df'. To coerce an object to
to tibble you can use: 'as_tibble' function.")
}
}
count_missing_values(dummy_data)
# "df" object should exist and should be a tibble/dataframe
if((envnames::get_obj_name(df) %in% ls()) &&
(tibble::is_tibble(df) || is.data.frame(df))){
df <- dplyr::as_tibble(df)
# view missing values for all variables (columns) in the df
if(variable_names_vec == "all"){
return(df %>%
purrr::map(function(x) sum(is.na(x))) %>%
unlist() %>%
broom::tidy() %>%
dplyr::rename("variable_name" = "names", "num_missing_values" = "x") %>%
dplyr::mutate(total_values = nrow(df),
percent_missing_val = (num_missing_values/total_values) * 100))
# view missing values only for selected variables in the "variable_names_vec"
# argument
} else if (sum(variable_names_vec %in% colnames(df)) ==
length(variable_names_vec)) {
return(df[, variable_names_vec] %>%
purrr::map(function(x) sum(is.na(x))) %>%
unlist() %>%
broom::tidy() %>%
dplyr::rename("variable_name" = "names", "num_missing_values" = "x") %>%
dplyr::mutate(total_values = nrow(df),
percent_missing_values = (num_missing_values/total_values) * 100))
# check if atleast one of the variable (column) names entered in the "variable_names_vec"
# argument does not exist in the underlying dataset entered in "df".
} else {
stop("All the variable (columns) names present in the vector 'varibale_names_vec' should
exist in the underlying dataset entered into 'data'. Please make sure that
this is the case, before proceeding.")
}
} else {
stop("Either the object doesn't exist or it isn't a tibble/dataframe. Please make
sure that the object exists in the current environment and also make
sure that it is of class: 'data.frame'/'tbl'/'tbl_df'. To coerce an object to
to tibble you can use: 'as_tibble' function.")
}
count_missing_values <- function(df, variable_names_vec = "all"){
# "df" object should exist and should be a tibble/dataframe
if((envnames::get_obj_name(df) %in% ls()) &&
(tibble::is_tibble(df) || is.data.frame(df))){
df <- dplyr::as_tibble(df)
# view missing values for all variables (columns) in the df
if(variable_names_vec == "all"){
return(df %>%
purrr::map(function(x) sum(is.na(x))) %>%
unlist() %>%
broom::tidy() %>%
dplyr::rename("variable_name" = "names", "num_missing_values" = "x") %>%
dplyr::mutate(total_values = nrow(df),
percent_missing_val = (num_missing_values/total_values) * 100))
# view missing values only for selected variables in the "variable_names_vec"
# argument
} else if (sum(variable_names_vec %in% colnames(df)) ==
length(variable_names_vec)) {
return(df[, variable_names_vec] %>%
purrr::map(function(x) sum(is.na(x))) %>%
unlist() %>%
broom::tidy() %>%
dplyr::rename("variable_name" = "names", "num_missing_values" = "x") %>%
dplyr::mutate(total_values = nrow(df),
percent_missing_values = (num_missing_values/total_values) * 100))
# check if atleast one of the variable (column) names entered in the "variable_names_vec"
# argument does not exist in the underlying dataset entered in "df".
} else {
stop("All the variable (columns) names present in the vector 'varibale_names_vec' should
exist in the underlying dataset entered into 'data'. Please make sure that
this is the case, before proceeding.")
}
} else {
stop("Either the object doesn't exist or it isn't a tibble/dataframe. Please make
sure that the object exists in the current environment and also make
sure that it is of class: 'data.frame'/'tbl'/'tbl_df'. To coerce an object to
to tibble you can use: 'as_tibble' function.")
}
}
count_missing_values(dummy_data)
ggplot2::ggplot(data = dummy_data_missing, mapping = aes(x = variable_name, y = num_missing_values, size = num_missing_values)) +
geom_jitter() + coord_flip()
ggplot2::ggplot(data = dummy_data_missing, mapping = aes(x = variable_name, y = num_missing_values, size = num_missing_values)) +
geom_col() + coord_flip()
?geom_text
ggplot2::ggplot(data = dummy_data_missing, mapping = aes(x = variable_name, y = num_missing_values, size = num_missing_values)) +
geom_col() + coord_flip() +
geom_text(mapping = aes(label = num_missing_values))
update_geom_defaults("rect", list(fill = "midnightblue", alpha = 0.8))
knitr::opts_chunk$set(cache = TRUE, cache.lazy = FALSE, warning = FALSE,
message =FALSE, echo = TRUE, dpi = 180,
fig.width = 8, fig.height = 5)
theme_minimal()
update_geom_defaults("rect", list(fill = "midnightblue", alpha = 0.8))
ggplot2::ggplot(data = dummy_data_missing, mapping = aes(x = variable_name, y = num_missing_values, size = num_missing_values)) +
geom_col() + coord_flip()
ggplot2::ggplot(data = dummy_data_missing, mapping = aes(x = variable_name, y = num_missing_values, size = num_missing_values)) +
geom_col() + coord_flip() +
labs(x = "Number of missing values", y = "Variable(Column) Name",
title = "Number of missing Values in variables (columns)") +
theme(legend = FALSE)
ggplot2::ggplot(data = dummy_data_missing, mapping = aes(x = variable_name, y = num_missing_values, size = num_missing_values)) +
geom_col() + coord_flip() +
labs(x = "Number of missing values", y = "Variable(Column) Name",
title = "Number of missing Values in variables (columns)") +
theme(legend.title = "Number of Missing Values")
?show.legend
?theme()
ggplot2::ggplot(data = dummy_data_missing, mapping = aes(x = variable_name, y = num_missing_values, size = num_missing_values)) +
geom_col() + coord_flip() +
labs(x = "Number of missing values", y = "Variable(Column) Name",
title = element_text("Number of missing Values in variables (columns)"))
ggplot2::ggplot(data = dummy_data_missing, mapping = aes(x = variable_name, y = num_missing_values, size = num_missing_values)) +
geom_col() + coord_flip() +
labs(x = "Number of missing values", y = "Variable(Column) Name",
title = "Number of missing Values in variables (columns)") +
theme(legend.title = element_blank())
count_missing_values(dummy_data, c("surveyor_id"))
aggr(dummy_data)
foo <- c(1, 1, 2, 3, 4, 1)
duplicated(foo)
sum(duplicated(foo))
sum(unique(foo))
foo <- c(1, 1, 2, 3, 4, 1)
sum(duplicated(foo))
sum(unique(foo))
unique(foo)
length(unique(foo))
dummy_data$surveyor_id
is_tibble(a)
library(roxygen2)
library(envnames)
